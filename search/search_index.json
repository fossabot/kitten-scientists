{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kitten Scientists v2","text":"<p>Warning</p> <p>Documenting all features has only been started since the beta phase. This documentation is part of the ongoing development effort and it is incomplete.</p> <p>Please refer to the Sections for the current documentation.</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#introduction","title":"Introduction","text":"<p>The script is written in TypeScript. The JS userscript itself is not intended to be edited. Changes need to be made in the userscript source code and then be compiled into the actual userscript.</p> <p>The project is set up to be used with Visual Studio Code. While other editors will work fine, some integrations have been prepared to make the development process easier.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>The development environment is expected to be a POSIX-compliant system. On Windows, WSL will do fine.</p> <p>You will need NodeJS to be able to work with the project. The project uses yarn as a package and project manager, which is usually integrated with recent NodeJS versions.</p> <p>Additionally, you will need to have Docker available, to use the container-based Kittens Game development server. If you do not have Docker, you can still build a release version of the script and drop that into your userscript manager.</p>"},{"location":"development/#general-development","title":"General Development","text":"<p>Whenever you want to see the result of your changes, use:</p> <pre><code>yarn userscript:build\n</code></pre> <p>This will build a fresh version of the userscript. If you are running a development container, this build output will also be used the next time you refresh the page.</p>"},{"location":"development/#development-with-kittens-game-container","title":"Development with Kittens Game Container","text":"<p>The development container provides a version of Kittens Game that already a Kitten Scientists version injected into it, based on your local development state.</p> <p>When the container is built, it downloads the latest version of the game from https://bitbucket.org/bloodrizer/kitten-game.</p> <ol> <li> <p>Manual Refresh (recommended)</p> <p>Build the development container and start it.</p> <pre><code>yarn devcontainer:run\n</code></pre> <p>The script prints the URL where you can now play the game with KS installed.</p> <p>You will need to manually reload the page after each build to get the latest changes in the browser.</p> </li> <li> <p>Watcher (experimental)</p> <p>Start a watcher to continuously rebuild KS when you make code changes.</p> <pre><code>yarn userscript:watch\n</code></pre> <p>Danger</p> <p>Sadly, this behavior is known to produce broken output files. Use at your own risk and switch to manual builds as necessary.</p> </li> </ol> <p>If you ever want to rebuild the container from scratch, for example, to pull in the latest source code of KG again, run:</p> <pre><code>yarn devcontainer:rebuild\n</code></pre>"},{"location":"development/#development-without-container","title":"Development without Container","text":"<p>To develop without containers, you can build a development version of the userscript with full debugging information.</p> <ol> <li> <p>Run the build script.</p> <pre><code>yarn userscript:preview\n</code></pre> <p>The userscript is placed in the <code>packages/userscript/output</code> directory.</p> </li> </ol>"},{"location":"development/#type-checking","title":"Type-Checking","text":"<p>To fill the Problems panel in VS Code with all current, type-related errors, run the <code>typecheck:all</code> npm task in VS Code.</p>"},{"location":"development/#commit-standards","title":"Commit Standards","text":"<p>KS development follows the Conventional Commits specification for commit messages.</p> <p>Whenever possible, use one of the established scopes:</p> <p>Tab related:</p> <ul> <li><code>bonfire</code></li> <li><code>religion</code></li> <li><code>science</code></li> <li><code>space</code></li> <li><code>time</code></li> <li><code>trade</code></li> <li><code>village</code></li> <li><code>workshop</code></li> </ul> <p>Internals related:</p> <ul> <li><code>api</code></li> <li><code>container</code></li> <li><code>core</code></li> <li><code>filters</code></li> <li><code>settings</code></li> <li><code>ui</code></li> </ul>"},{"location":"development/#pull-requests","title":"Pull Requests","text":"<p>When you open a pull request, make sure that you squash your commits into a single one, unless individual commits are substantial enough that they should be preserved as-is. Just make sure that all commits follow the commit standards mentioned above.</p>"},{"location":"development/#releases","title":"Releases","text":""},{"location":"development/#building-a-release-version-of-the-userscript","title":"Building a Release Version of the Userscript","text":"<p>Run the script to build the release:</p> <pre><code>yarn userscript:release\n</code></pre>"},{"location":"development/#releasing-a-new-version","title":"Releasing a New Version","text":"<ol> <li> <p>Build a preview of the script:</p> <pre><code>yarn userscript:preview\n</code></pre> </li> <li> <p>Load the built preview into a userscript manager in Chrome and perform a quick, manual test.</p> <ol> <li>Does the script load at all?</li> <li>Are settings restored to expectation?</li> <li>Are settings saved when they are changed?</li> </ol> </li> <li> <p>Create a tag for this version:</p> <pre><code>git tag v2.0.0-beta.9\n</code></pre> </li> <li> <p>Push the tag:</p> <pre><code>git push --tags\n</code></pre> </li> <li> <p>Raise the version number in <code>packages/userscript/package.json</code> to a higher version that will be in development next!</p> </li> <li> <p>Make sure to also update the <code>README.md</code> to point the bookmarklet to the new script.</p> </li> <li> <p>Make sure to also update the <code>packages/documentation/installation.md</code> to point to the latest version number.</p> </li> <li> <p>Make sure to also update the <code>.github/bug_report.yml</code> to mention the latest version number.</p> </li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#userscript-manager-recommended","title":"Userscript Manager (recommended)","text":"<p>Hint</p> <p>If you don't have a userscript manager yet, Tampermonkey is a good solution for the most popular browsers.</p> <p>The file you need to put into your userscript manager is available from the Releases page of KS.</p> <p>KS is released in 3 variants:</p> <ol> <li> <p>The latest stable release.</p> <p>This is a release with a familiar version number, that has been designated as a reasonably stable version to use. At this time, that is:</p> <p>https://github.com/kitten-science/kitten-scientists/releases/tag/v2.0.0-beta.2.</p> </li> <li> <p>The nightly release.</p> <p>This release is built each night, if any changes have been made to the source code since the last nightly build.</p> <p>These builds usually have a time stamp in their filename, like <code>20230103</code>, which designates the night they were built on.</p> <p>https://github.com/kitten-science/kitten-scientists/releases/tag/nightly</p> </li> <li> <p>The latest release.</p> <p>This is built after every single change to the codebase. It should be considered highly unstable and experimental, although it usually isn't.</p> <p>https://github.com/kitten-science/kitten-scientists/releases/tag/latest</p> </li> </ol>"},{"location":"installation/#bookmarklet","title":"Bookmarklet","text":"<p>You can also load KS through a bookmarklet.</p> <p>To use bookmarklets, just create a new bookmark in your browser and enter the text below as the URL. When you're on the KG game website, open this bookmark, and it should load KS for you.</p> <p>Note</p> <p>This bookmarklet points to the latest stable release of KS.</p> <pre><code>javascript:(function(){var d=document,s=d.createElement('script');s.src='https://github.com/kitten-science/kitten-scientists/releases/download/v2.0.0-beta.2/kitten-scientists-2.0.0-beta.2.user.js';d.body.appendChild(s);})();\n</code></pre>"},{"location":"installation/#container","title":"Container","text":"<p>Warning</p> <p>If you're not familiar with Docker/OCI containers, then you can safely ignore this section.</p> <p>You can pull any version of the script as a container. The images are hosted on the GitHub registry.</p> <p>The container exposes Kittens Game's own development server on port 8080. It has the version of the userscript injected into it, according to the tag on the image.</p> <pre><code>docker run --publish 8080:8080 --rm ghcr.io/kitten-science/kitten-scientists:2.0.0-beta.2\n</code></pre>"},{"location":"reference/Repository%20Scripts/","title":"Full reference","text":""},{"location":"reference/Repository%20Scripts/#devcontainerbuild","title":"devcontainer:build","text":"<ul> <li>Project: <code>@kitten-science/kitten-game</code></li> <li> <p>Source:</p> <pre><code>docker build --tag kitten-game .\n</code></pre> </li> <li> <p>Description:</p> <p>Builds the Development Container.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#devcontainerrebuild","title":"devcontainer:rebuild","text":"<ul> <li>Project: <code>@kitten-science/kitten-game</code></li> <li> <p>Source:</p> <pre><code>docker build --no-cache --tag kitten-game .\n</code></pre> </li> <li> <p>Description:</p> <p>Rebuilds the development container.</p> <p>You're going to want to rebuild your development container every once in a while to ensure you're using the latest version of Kittens Game in your container.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#devcontainerrun","title":"devcontainer:run","text":"<ul> <li>Project: <code>@kitten-science/kitten-game</code></li> <li> <p>Source:</p> <pre><code>bash ./scripts/run-development-container.sh\n</code></pre> </li> <li> <p>Description:</p> <p>Builds the development container and starts it.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsbuild","title":"docs:build","text":"<ul> <li>Project: <code>@kitten-science/documentation</code></li> <li> <p>Source:</p> <pre><code>.scripts/build.sh\n</code></pre> </li> <li> <p>Description:</p> <p>Build the documentation.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsnsd","title":"docs:nsd","text":"<ul> <li>Project: <code>@kitten-science/documentation</code></li> <li> <p>Source:</p> <pre><code>nsd --cwd=$INIT_CWD --docs-location=\"packages/documentation/docs/reference/Repository Scripts/\"\n</code></pre> </li> <li> <p>Description:</p> <p>Update the scripts documentation that you are looking at right now.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsserve","title":"docs:serve","text":"<ul> <li>Project: <code>@kitten-science/documentation</code></li> <li> <p>Source:</p> <pre><code>.scripts/serve.sh\n</code></pre> </li> <li> <p>Description:</p> <p>Start the mkdocs-material development server to work on the documentation.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#lintall","title":"lint:all","text":"<ul> <li>Project: <code>kitten-scientists</code></li> <li> <p>Source:</p> <pre><code>eslint . --ext .ts\n</code></pre> </li> <li> <p>Description:</p> <p>Check source code for style issues.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#testsbuild","title":"tests:build","text":"<ul> <li>Project: <code>@kitten-science/tests</code></li> <li> <p>Source:</p> <pre><code>tsc --build\n</code></pre> </li> <li> <p>Description:</p> <p>Build tests.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#testsrun","title":"tests:run","text":"<ul> <li>Project: <code>@kitten-science/tests</code></li> <li> <p>Source:</p> <pre><code>mocha output/tests/*.spec.js\n</code></pre> </li> <li> <p>Description:</p> <p>Execute tests.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#typecheckall","title":"typecheck:all","text":"<ul> <li>Project: <code>kitten-scientists</code></li> <li> <p>Source:</p> <pre><code>tsc --noEmit --incremental false\n</code></pre> </li> <li> <p>Description:</p> <p>Run the TypeScript compiler to find problems with the code.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#userscriptbuild","title":"userscript:build","text":"<ul> <li>Project: <code>@kitten-science/userscript</code></li> <li> <p>Source:</p> <pre><code>vite --config vite.config.inject.js build\n</code></pre> </li> <li> <p>Description:</p> <p>Build the userscript.</p> <p>This builds the version of the script that is also used in the development container.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#userscriptpreview","title":"userscript:preview","text":"<ul> <li>Project: <code>@kitten-science/userscript</code></li> <li> <p>Source:</p> <pre><code>DEV_BUILD=true vite --config vite.config.userscript.js build\n</code></pre> </li> <li> <p>Description:</p> <p>Build a development release version of the userscript.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#userscriptrelease","title":"userscript:release","text":"<ul> <li>Project: <code>@kitten-science/userscript</code></li> <li> <p>Source:</p> <pre><code>MINIFY=true vite --config vite.config.userscript.js build\nvite --config vite.config.userscript.js build\n</code></pre> </li> <li> <p>Description:</p> <p>Build a release version of the userscript.</p> <p>This is usually only used from CI to build both the regular version of the script, as well as a minified build. When you use this locally, it still builds both files, but clears the output directory between builds. So you end up with only the regular version.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#userscriptversion","title":"userscript:version","text":"<ul> <li>Project: <code>@kitten-science/userscript</code></li> <li> <p>Source:</p> <pre><code>node version.cjs\n</code></pre> </li> <li> <p>Description:</p> <p>Returns the version for the userscript.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#userscriptwatch","title":"userscript:watch","text":"<ul> <li>Project: <code>@kitten-science/userscript</code></li> <li> <p>Source:</p> <pre><code>vite --config vite.config.inject.js build --watch\n</code></pre> </li> <li> <p>Description:</p> <p>Builds the userscript and watches all files for changes. If changes are detected, the script is rebuilt.</p> <p>Warning</p> <p>This watcher has caused problems in the past, generating broken output. Use at your own risk.</p> </li> </ul>"},{"location":"sections/bonfire/","title":"Bonfire","text":""},{"location":"sections/bonfire/#buildings","title":"Buildings","text":"<p>When you enable a building, this building will be built if all of these are true:</p> <ol> <li>Less than Max buildings have already been built.</li> <li>All of the resources required for the building to built are filled to Trigger of their stock capacity.</li> <li>All of the resources required for the building to built are sufficiently available after considering configured Stock and Consume.</li> </ol>"},{"location":"sections/bonfire/#upgrades","title":"Upgrades","text":"<p>Buildings with a \"\u2ba4\" in front of their name are upgrades to the building above them.</p> <p>You can select which upgrade will be automatically purchased by enabling them under Upgrade buildings.</p>"},{"location":"sections/bonfire/#additional-options","title":"Additional options","text":"<p>Turn on steamworks turns on the Steamworks building as soon as the first one is purchased.</p>"},{"location":"sections/log-filters/","title":"Log Filters","text":""},{"location":"sections/overview/","title":"Overview","text":""},{"location":"sections/overview/#introduction","title":"Introduction","text":"<p>The UI of KS is divided into several major sections. The names of these sections correlate to the main tabs in the KG UI.</p> <p>Refer to the individual section documentation pages for details of the automation features on those sections.</p>"},{"location":"sections/overview/#ui-concepts","title":"UI Concepts","text":""},{"location":"sections/overview/#panels","title":"Panels","text":"<p>The UI of KS is made up of panels. You recognize a panel from the little <code>+</code> symbol on it. When you click on the <code>+</code>, the panel expands and the <code>+</code> turns into a <code>-</code>. When you now click the <code>-</code>, the panel collapses again.</p> <p>Note</p> <p>The <code>+</code>/<code>-</code> button is often referred to as an expando.</p> <p>Most panels are also settings. Which means that they have a checkbox as their top element, which is always visible, even when the panel is collapsed. When you disable this setting, it causes any automation that is controlled through that section of the UI to be bypassed.</p>"},{"location":"sections/overview/#settings","title":"Settings","text":"<p>A setting in KS is most commonly a checkbox. When the checkbox is checked, this feature is active. If the checkbox is unchecked, the feature is inactive.</p> <p>Some settings also come with additional options. These are shown on the same line as the checkbox. You can click on these options to change their value. Sometimes, these options behave like expando buttons and expand an entire new panel with options.</p>"},{"location":"sections/overview/#settings-lists","title":"Settings Lists","text":"<p>A settings list is a series of settings that have are grouped with each other. Sometimes, these lists have tools at the bottom. These tools can be any of these:</p> <ol> <li> <p>Enable all options</p> <p>Activates everything.</p> </li> <li> <p>Disable all options</p> <p>Turns everything off.</p> </li> <li> <p>Reset to defaults</p> <p>Set all options to the values that come with KS.</p> </li> </ol>"},{"location":"sections/overview/#triggers","title":"Triggers","text":"<p>One common option to see is the trigger, symbolized by a little lightning. A trigger usually communicates at which threshold an automation should become active. Which resource this threshold refers to, is documented with the individual automations.</p> <p>Triggers can be absolute values or, most commonly, a percentage. This percentage then usually refers to your storage capacity for a given resource. When you enter a percentage value into KS, it expects you to provide it as a value between <code>0</code> and <code>1</code>. So if you wanted a trigger value at \u00be of your storage capacity, you'd enter <code>0.75</code>.</p>"},{"location":"sections/overview/#limits","title":"Limits","text":"<p>Another common option is the limit. This will usually prevent an automation from going over a certain value. The most important aspects to understand are:</p> <ul> <li><code>-1</code> means infinity. Effectively disables the limit.</li> <li><code>0</code> means don't do anything ever.</li> <li>any other number will be the limit for this automation.</li> </ul> <p>Hint</p> <p>When entering limits, you can usually use the KG notations for big numbers. So <code>9.5M</code> will become <code>9,500,000</code>. You have to use upper-case letters for this to work though.</p>"},{"location":"sections/religion/","title":"Religion","text":""},{"location":"sections/resource-control/","title":"Resource Control","text":""},{"location":"sections/science/","title":"Science","text":""},{"location":"sections/space/","title":"Space","text":""},{"location":"sections/state-management/","title":"State Management","text":"<p>Danger</p> <p>This section contains features that can erase all of your KS settings, or even your entire save game. Absolutely back up your game before exploring these!</p> <p>If you disable the checkbox Do NOT confirm destructive actions. (Danger!), you will not be asked to confirm any actions that destroy your data. Enabling this option allows you to switch between states with a single click and load save games very quickly.</p>"},{"location":"sections/state-management/#copy-to-clipboard","title":"Copy to Clipboard","text":"<p>With a single click you can copy only your KS settings, or your entire KG save game to the clipboard.</p> <p>The Compress data setting controls if the copied content will be compressed with the same process that KG uses when you export your save. When you don't compress the data, you will be able to read and edit it in plain text.</p> <p>Note</p> <p>When you want to export a KG save game, and you want to be able to load it through the regular KG import mechanism later, remember that KG only expects compressed data.</p>"},{"location":"sections/state-management/#load-from-clipboard","title":"Load from Clipboard","text":"<p>You can load either only KS settings or an entire KG save game. When you use either option, you can enter your save game data into the appearing prompt. KS supports loading both compressed and uncompressed data.</p>"},{"location":"sections/state-management/#local-states","title":"Local States","text":"<p>Allows you to quickly store and restore entire sets of KS settings.</p> <p>When you store your current state, KS places it in the Load stored state section. You can then click on that state to load it again. You can also import a state from the clipboard. Both compressed and uncompressed states can be imported.</p>"},{"location":"sections/state-management/#reset-to-factory-defaults","title":"Reset to Factory Defaults","text":"<p>Resets every setting to the state that KS would have if you used it for the first time today. This only impacts KS, your KG save game is not touched by this action.</p>"},{"location":"sections/state-management/#load-stored-states","title":"Load Stored States","text":"<p>When you have stored any states, they will appear in this list. Clicking on their name will load them.</p> <p>You can also copy the state to the clipboard, or delete it. When copying a state, the Compress data setting is respected.</p>"},{"location":"sections/time-control/","title":"Time Control","text":""},{"location":"sections/time/","title":"Time","text":""},{"location":"sections/trade/","title":"Trade","text":""},{"location":"sections/village/","title":"Village","text":""},{"location":"sections/workshop/","title":"Workshop","text":""}]}